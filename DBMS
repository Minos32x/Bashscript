#! /bin/bash
# trap 'echo "3eb Kda :p"' 20 2
addf="f"
flag_regex="t"
flagchange=0
flagemptydb=0
flagusingdb=0
regex_input="t"

create_db() {
clear
if [[ $flagchange -eq 1 ]]
	then
cd ..
flagchange=0	
fi
if [[ $flagemptydb -eq 1 ]]
then
echo "You Must Create DataBase First To Use It"
fi
flagemptydb=0
read -p "Enter DataBase Name To Create: " dbname
if [ -d $dbname ]
then
echo "Couldn't Create
A DataBase With Same name already exist"
else
mkdir $dbname
echo "DataBase * $dbname * Created Successfully"

fi

} #end of create_db func


check_regex_db(){

	if [[ $1 =~ ^[a-zA-Z0-9]+$ ]]
		then
       flag_regex="t"
	else
       flag_regex="f"
       flagchange=0
	fi
} # end of check_regex_db



use_database(){
clear
if [[ $flagchange == 1 ]]
then
cd ..
fi

echo "You Must Select Database First"
echo "Current Databases:"
func_list

if [[ $flagemptydb -eq 1 ]]
  then
    create_db
else

read -p "Select DataBase: " dbtouse
check_regex_db $dbtouse # check if database name written sa7 :D
###
if [[ $flag_regex == "f" ]]
	then
	echo "erroooor"
	 use_database 
else
switch_to_db $dbtouse
	flagchange=1

flagusingdb=1
fi
####
fi

echo "You Are Using [$dbtouse] Database"
} # end of use_database function


switch_to_db(){
if [ -d $1 ]
then
cd $1

else
echo "Error DataBase Doesn't Exists"
use_database
fi
} #end of switch_db func


func_list(){
list=`ls -lh --ignore={".","..",".git","DBMS","README"} | grep '^d' | cut -d" " -f9`
if [[ $list == "" ]]
then
echo "Empty Folder"
flagemptydb=1
else
for f in $list
do
if [ -d $f ]
then
echo $f
fi
done
fi
} #end of listing func

table_list(){

	tablelist=`ls --ignore={"*.*",}`
if [[ $tablelist == "" ]]
then
echo "No Tables To Show Database is Empty "
else
	echo $tablelist
fi
} #end of table listing func


check_regex_input(){
  
  if [[ $1 =~ ^[a-zA-Z0-9]+$ ]]

  	then
 
  	regex_input="t"

  else
echo "PLease Enter A Valid Field Name"
sleep 2
regex_input="f"

  fi

} # end of check_regex_input



add_filed(){

  echo "Availabe Tables"
  table_list
  read -p "Select Table: " tablename
  read -p "Enter No of Cols: " colnumbers
  sed -i '/\<end_conf\>/d' $tablename.conf 
  addf="t"
  for ((i=1;i<=$colnumbers;i++ ))
  do   

  funccheck
  done
  echo "end_conf" >> $tablename.conf 
  
} # end of field func

delete_field(){

if [[ $tablename ]]
	then
echo ""
else
	echo "Availabe Tables"
table_list
read -p "choose table: " tablename
fi


echo "available fields :"
awk 'NR==2' $tablename
read -p "choose field to delete: " deleted_field

check_regex_input $deleted_field

if [[ $regex_input == "t" ]]
then

num=`awk -v target=$deleted_field '{if(NR == 2){for(i=1;i<=(NF+2);i++){if ($i == target){break} }}}END{print i }' $tablename`
sed -i  "/^$deleted_field:/d" $tablename.conf
awk -i inplace -F" " -v var="$num" -v iter=0 '{ iter++; if(iter == 1){print} else {$var="" ; print} }' $tablename

else

	delete_field
fi

} #end of func delete_field

change_field_type(){

  clear
echo "Availabe Tables"
  table_list
  read -p "Select Table: " tablename
endnum=`grep -n "end_conf" $tablename.conf | grep -Eo '^[^:]+'`
v=$(($endnum-1))
t=$(($v-4))
  echo "available fields :"
  cat $tablename.conf | head -$v | tail -$t | cut -d: -f1 
  echo ""
  read -p "choose field to Edit: " field_to_edit
clear
field_edit_dtype=`grep $field_to_edit $tablename.conf | cut -d: -f2`
field_edit_null=`grep $field_to_edit $tablename.conf | cut -d: -f4`
ff=`grep -n $field_to_edit $tablename.conf | grep -Eo '^[^:]+'`


  echo "
1-edit datatype
2-edit null constrain"
read -p "SELECT AN OPTION: " edit_field_type
clear
case $edit_field_type in
1) echo "Current Data Type :" $field_edit_dtype
select colType in Ineteger String
              do
                case $colType in
                  "Ineteger")
                # sed -i -e '5s/String/Ineteger/' $tablename 
                awk -i inplace -v var2="$ff" 'NR==var2 {gsub("String","Ineteger")}{print }' $tablename.conf
                    break ;
                    ;;
                  "String")
                awk -i inplace -v var2="$ff" 'NR==var2 {gsub("Ineteger","String")}{print }' $tablename.conf
                    break ;
                    ;;
                  *)
                echo "You Must Choose Column Data Type"
                esac
              done
              

;;
2) 
if [[ $field_edit_null ]]
  then
echo "Current Null Constrain :" $field_edit_null
select colType in NotNull AcceptNull
              do
                case $colType in
                  "NotNull")
                   awk -i inplace -v var2="$ff" 'NR==var2 {gsub("AcceptNull","NotNull")}{print }' $tablename.conf

                    break ;
                    ;;
                  "AcceptNull")
                    awk -i inplace -v var2="$ff" 'NR==var2 {gsub("NotNull","AcceptNull")}{print }' $tablename.conf

                    break ;
                    ;;
                  *)
                echo "You Must Choose Column Data Type"
                esac
              done
    else
      echo "This Field Is Primary Cant have null option"
    fi

;;

esac  
clear


} # end of change_field_type


funccheck(){
	read -p "Enter Column [$i] Name: " ColName 
	check_regex_input $ColName

	if [[ $regex_input == "f" ]]
		then
   funccheck
	else

		
	resultfield=`grep $ColName $tablename | wc -l`

	if [[ $resultfield -eq 0 ]]
		then
    colArr[$i]=$ColName
    newconf[$i]=$ColName

    echo -n "$ColName" >> $tablename.conf
    if [[ $addf == "t" ]] #if add field
      then
     awk -i inplace -v col=" $ColName" 'NR==2 {$0=$0 col} 1' $tablename #to insert always in first line
     addf="f"
   else

        echo -n "$ColName " >> $tablename

   fi

    PS3="Select Column [$ColName]  Data Type: ";
    flag=0

      				select colType in Ineteger String
      				do
      					case $colType in
      						"Ineteger")
								echo -n ":Ineteger" >> $tablename.conf;
                  newconf[$i]=":Ineteger"

      							break ;
      							;;
      						"String")
								echo -n ":String" >> $tablename.conf;
                        newconf[$i]=":String"

      							break ;
      							;;
      						*)
								echo "You Must Choose Column Data Type"
      					esac
      				done
      				
      				 result=`grep '\<Primary\>' $tablename.conf | wc -l`
              if [[ $result -eq 0 ]]
                then
      				echo " "
      				echo "Select Primary Key"
      				echo " "
      			
      				select colType in Primary NotPrimary
      				do
      					case $colType in
      						"Primary")
                flag=1
								echo -e ":Primary" >> $tablename.conf;
                newconf[$i]=":Primary"

								 
      							break ;
      							;;
      						"NotPrimary")
								echo -n ":NotPrimary" >> $tablename.conf;
                    newconf[$i]=":NotPrimary"

      							break ;
      							;;
      						*)
								echo "You Must Choose The Primary Key"
      					esac
      				done
      			else
      				echo -n ":NotPrimary" >> $tablename.conf;
              newconf[$i]=":NotPrimary"


      			    fi # end of primary selection
                    
                      
                     if [[ flag -eq 0 ]]
                     	then
                     	flag=1
      			    # select null constrains
      				echo " "
      				echo "Select Null OR Not Null Constrain for $ColName Field"
      				echo " "
      				select colType in NotNull AcceptNull
      				do
      					case $colType in
      						"NotNull")
								echo -n ":NotNull" >> $tablename.conf;
								read -p "Enter Default Value: " defvalue

                                 echo -e ",$defvalue" >> $tablename.conf  
                              newconf[$i]=":NotNull,$defvalue"


      							break ;
      							;;
      						"AcceptNull")
								echo -e ":AcceptNull" >> $tablename.conf;
                newconf[$i]=":AcceptNull"
      							break ;
      							;;
      						*)
								echo "You Must Choose Column Constrain"
      					esac
      				done #end of null constrain
      			fi
    else
    	echo "Field Already Exist"
    	funccheck
    	
    fi
fi #end of check regex
} # end of funccheck function

create_table(){

clear
if [[ $dbtouse ]]
	then
clear
echo "Current Tables: "
table_list
read -p "Create Table: " tablename

if [ -f $tablename ]
then
flag_table_exist=1
echo "Table Already Exists"
sleep 2
create_table

else
	
	clear
touch $tablename.conf
touch $tablename
echo -e "start_table" >> $tablename #edited here
if [ $? == 0 ]
	then
	echo "*****************************************" >> $tablename.conf
	echo "Table *"$tablename"* Schema" >> $tablename.conf
	read -p "Enter Columns Number: " colnumbers
	echo "Columns Numbers = " $colnumbers >> $tablename.conf         
	echo "*****************************************" >> $tablename.conf
	for ((i=1;i<=$colnumbers;i++ ))
	do 
	echo "*****************************************"

	funccheck
	done
	echo "end_conf" >> $tablename.conf

clear
echo "Creating Table Please Wait"
sleep 1
clear
echo "Table : $tablename  Created Successfully in * $dbtouse * DataBase"

fi
sleep 1
fi
else
	
	use_database
fi
} #end of table creation function

drop_db(){
	echo "Current Databases"
	func_list
  if [[ $flagusingdb -eq 1 ]]
then
echo "You Cant' Drop Database While Using It"
else
  read -p "Choose DataBase To Drop: " dbtodrop
  rm -r $dbtodrop
fi

} #end of drop_dp function

drop_table(){

	if [[ $dbtouse ]]
		then
table_list

read -p "Enter Table Name To Drop: " tabledropname
if [ -f $tabledropname ]
then
rm $tabledropname
cd ..
else
echo "Table Doesn't Exist"
cd ..
fi
else
	
	use_database
fi
} #end of dropping table func

change_table_name(){

	echo "Availabe Tables"
    table_list

	read -p "Enter Old File Name: " oldname
	read -p "Enter New File Name: " newname
    mv $oldname $newname
    mv $oldname.conf $newname.conf

} #end of change_table_name function

alter_table(){

if [[ $dbtouse ]] 
	then
	clear
while true
  do
    echo " You Are on [ $dbtouse ] Database"
    echo ""
echo "
1- Change table name
2- Add field
3- Delete field
4- Change field datatype
5- Back To Manager
"

read -p "CHOOSE AN OPTION: " alteroption

case $alteroption in
	1) change_table_name ;;
  2) add_filed;;
	3) delete_field;;
	4) change_field_type;;
    5) break;;
esac

  done
else
	use_database
fi

} # end of alter_table function




check_null(){

  if [[ $NL =~ "NotNull"* ]]
    then 
    if [[ $record == "" ]]
      then
      record=`echo $NL | cut -d"," -f2` 
      echo "Default Value Has Been Set To :" `echo $record`
      
      echo -n "$record " >> $tablename

    else
 
      echo -n "$record " >> $tablename

    fi
    
  else
   
    echo -n "$record " >> $tablename

  fi  
} # end fo check_null function

check_DT(){

  if [[ $DT == "Ineteger" ]]
    then
    if [[ "$record" =~ ^[0-9]+$ || "$record" == "" ]]
      then
      
      check_null
    else
      echo "You Must Enter Integer Value"
      # read -p "Add Field Value To Insert It: " record
      check_pk

    fi
    else
    check_null 

  fi

} #end of check_DT function
check_pk(){

read -p "Add Field Value To Insert It: " record

 check_regex_input $record

 if [[ $regex_input == "f" ]]
 	then
check_pk

 else

  if [[ $PK == "Primary" ]]
    then
    
  
    list_record=`cat $tablename | cut -d" " -f$i`

     nr="f"

    for f in $list_record
do
 
if  [[ $f == $record ]] 
  then
 echo "exist"
 echo $f
 nr="t"
  
fi

done
if [[ $nr == "t" ]]
  then
  nr="f"
  check_pk
 
else
  check_DT

fi
else
 
check_DT

fi
fi
} # end of check_pk function

add_record(){
clear
if [[ $dbtouse ]]
    then

echo "Select Table To Insert in it"
table_list


read -p "Enter Table Name To add record: " tablename
if [ -f $tablename ]
then
clear
echo "" >> $tablename
awk -i inplace 'NF > 0' $tablename
echo "Your Are on [$tablename] Table" 
echo " "
 echo "Availabe Fields: "
  awk 'NR==2' $tablename
  echo " "
  num_of_fields=`awk 'NR==2{print NF; exit}' $tablename`
  for ((i=1;i<=$num_of_fields;i++ ))
  do
echo "******************************************************"
  echo "Current Field is: " `awk -v t=$i 'NR==2{print $t}' $tablename`

  PK=`awk -F: -v t=$(($i+4)) 'NR==t{print $3 }' $tablename.conf`
  DT=`awk -F: -v t=$(($i+4)) 'NR==t{print $2 }' $tablename.conf`
  NL=`awk -F: -v t=$(($i+4)) 'NR==t{print $4 }' $tablename.conf`

   if [[ $PK == "Primary" ]]
   	then
   	echo "This is a primary field"
   else
   	echo "This Field isn't the primary"
   fi
   echo "Field Data Type is: " $DT

if [[ $NL == "AcceptNull" ]]
	then
echo "This Field Accept Null Values"
else
	echo "This Field Doesn't Accept Null Values"

fi
echo " "

  check_pk
done

else
echo "Table Doesn't Exist"
add_record
fi
else
  
  use_database
fi


} # end of add_record

sort_table(){

if [[ $dbtouse ]] 
  then
while true
do 

echo "
1-Start Sorting 
2-Back To Manager"
read -p "Select Option : " sort_func_opt

case $sort_func_opt in 
  1)
clear 
echo "Availabe Tables: "
echo ""
table_list
echo ""
read -p "Enter Table Name To Sort It: " tablename

startnum=`grep -n "start_table" $tablename | grep -Eo '^[^:]+'`

total_list=`cat $tablename | wc -l`
echo $total_list
t1=$((total_list-2))

echo "Availabe Rows :"
cat $tablename | head -$total_list | tail -$t1

endnum=`grep -n "end_conf" $tablename.conf | grep -Eo '^[^:]+'`
v=$(($endnum-1))
t=$(($v-4))
echo "Availabe Fields To Sort With :"
to_count=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1 | wc -l` 
to_print=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1` 

for((i=1;i<=$to_count;i++))
do
  field_name=`echo $to_print | cut -d" " -f"$i"`
  echo $i")" $field_name
done

read -p "Select Field To Sort With[Select No Of The Field] : " field_sort
echo " 
# Choose preference to sort with 
# 1- Ascending
# 2- Descending
# "

ch_field=$((field_sort+4))
field_sort_type_check=`cat $tablename.conf | head -$ch_field | tail -1 | cut -d: -f2`

read -p "" sort_opt
clear
echo "*********************************************************" 
echo "Current Columns"
echo $to_print 
case $sort_opt in
  1)
if [[ $field_sort_type_check == "Ineteger" ]]
then
cat $tablename | tail -$t1 | sort -t" " -k$field_sort -g  
elif [[ $field_sort_type_check == "String" ]]
  then
cat $tablename | tail -$t1 | sort -t" " -k$field_sort  
fi
    ;;
  2)
if [[ $field_sort_type_check == "Ineteger" ]] 
  then
cat $tablename | tail -$t1 | sort -r -t" " -k$field_sort -g
elif [[ $field_sort_type_check == "String" ]]
  then
cat $tablename | tail -$t1 | sort -r -t" " -k$field_sort
fi
  ;; 
esac
echo "*********************************************************" 

;;
2) break;;
esac
done

else
use_database

  fi

} # end of sort_table function  

select_according_to_field(){
clear

if [[ $dbtouse ]] 
  then
  echo "Availabe Tables: "
  if [[ $tablename ]]
  	then

echo ""
endnum=`grep -n "end_conf" $tablename.conf | grep -Eo '^[^:]+'`
v=$(($endnum-1))
t=$(($v-4))
echo "Availabe Fields To Select With :"
to_count=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1 | wc -l` 
to_print=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1` 
for((i=1;i<=$to_count;i++))
do
  field_name=`echo $to_print | cut -d" " -f"$i"`
  echo $i")" $field_name

done

read -p "Choose Field [choose field number] : " field_selected

read -p "Enter Value: " field_value

check_regex_input $field_value

# if [[ $regex_input == "f" ]]
	# then
	# select_according_to_field
# else

awk  -F" " -v var1="$field_selected" -v var2="$field_value" ' { if($var1==var2){  print $0} } ' $tablename
# fi
  else
table_list
read -p "Enter Table Name To Select From It : " tablename
  fi

  while true
  do
echo "
1- to exit to previous menu"

read -p "" select_field_opt

case $select_field_opt in 
	1) break ;;
esac 

  done

else use_database
fi


} # end of select_according_to_field function

delete_record(){

	clear
	if [[ $dbtouse ]] 
  then
  echo "Availabe Tables: "
  table_list
read -p "Enter Table Name To Delete From It : " tablename
  if [[ $tablename ]]
  	then

echo ""
endnum=`grep -n "end_conf" $tablename.conf | grep -Eo '^[^:]+'`
v=$(($endnum-1))
t=$(($v-4))
echo "Availabe Fields To Select With :"
to_count=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1 | wc -l` 
to_print=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1` 
for((i=1;i<=$to_count;i++))
do
  field_name=`echo $to_print | cut -d" " -f"$i"`
  echo $i")" $field_name

done

total_list=`cat $tablename | wc -l`
t1=$((total_list-2))  
echo "Availabe Rows :"
cat $tablename | tail -$t1 

read -p "Choose Field [choose field number] : " field_selected

read -p "Enter Value: " field_value

awk -i inplace -F" " -v var1="$field_selected" -v var2="$field_value" ' { if($var1==var2){ $0="" } print  } ' $tablename 
awk -i inplace 'NF > 0' $tablename

  fi

  while true
  do
echo "
1- to exit to previous menu"

read -p "" select_field_opt

case $select_field_opt in 
	1) break ;;
esac 

  done

else use_database
fi

} # end of delete_field function

edit_record(){

clear
	if [[ $dbtouse ]] 
  then
  echo "Availabe Tables: "
  table_list
read -p "Enter Table Name To Select Edit In It : " tablename
  if [[ $tablename ]]
  	then

echo ""
endnum=`grep -n "end_conf" $tablename.conf | grep -Eo '^[^:]+'`
v=$(($endnum-1))
t=$(($v-4))
echo "Availabe Fields To Edit :"
to_count=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1 | wc -l` 
to_print=`cat $tablename.conf | head -$v | tail -$t | cut -d: -f1` 
for((i=1;i<=$to_count;i++))
do
  field_name=`echo $to_print | cut -d" " -f"$i"`
  echo $i")" $field_name
  arrayField[$i]=$field_name

done

total_list=`cat $tablename | wc -l`
t1=$((total_list-2))  
echo "Availabe Rows :"
cat $tablename | tail -$t1 
echo ""
# read -p "Enter Id of the required row to edit : " field_edit_id

read -p "Choose Field To Edit [choose field number] : " field_selected

read -p "Enter Value Old Value of [${arrayField[$field_selected]}] :  " field_value

check_regex_input $field_value

if [[ $regex_input == "f" ]]
	then
	edit_record
else

read -p "Enter New Value of [${arrayField[$field_selected]}]: " new_field_val
check_regex_input $new_field_val

if [[ $regex_input == "f" ]]
	then
	edit_record
else

# field_edit_id=$((field_edit_id+2))

awk -i inplace -F" " -v var1="$field_selected" -v var2="$field_value" -v var3="$new_field_val" -v var4="field_edit_id" ' { if($var1==var2){ $var1=var3 } print  } ' $tablename 
awk -i inplace 'NF > 0' $tablename
fi
fi
  fi

  while true
  do
echo "
1- to exit to previous menu"

read -p "" select_field_opt

case $select_field_opt in 
	1) break ;;
esac 

  done

else use_database
fi

} # end of edit_record function

select_record(){

  clear
if [[ $dbtouse ]] 
  then
  echo "Availabe Tables: "
table_list
read -p "Enter Table Name To Select From It : " tablename
  while true
  do
echo "
Select Options :
1- Select All
2- Select According to Certain Field 
3- Show All File in HTML From
4- Show All File in CSV FORM
5- Back To Manager
"

read -p "Choose an option: " select_opt

case $select_opt in
1)

echo "*********************************************************" 
total_list=`cat $tablename | wc -l`
t1=$((total_list-2))  
echo "Availabe Rows :"
cat $tablename | tail -$t1 
echo "*********************************************************"
sleep 2
;;

2) 
select_according_to_field
;;


3)
startnum=`grep -n "start_table" $tablename | grep -Eo '^[^:]+'`
total_list=`cat $tablename | wc -l`
t1=$((startnum+1))
echo $t1
echo $total_list  

echo "*********************************************************" 
awk -v var1="$t1" -v var2="$total_list" -v lister="$to_print" ' BEGIN{FS=" "; print "<div style=background:blue>" "<strong>"lister"</strong>" "</div>"  "<br/>" }
 NR==var1,NR==var2 { print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10 "<br/>" }' $tablename > $tablename.html
echo "*********************************************************" 
xdg-open $tablename.html

;;

4)
startnum=`grep -n "start_table" $tablename | grep -Eo '^[^:]+'`
total_list=`cat $tablename | wc -l`
t1=$((total_list-startnum))  
echo "Availabe Rows :"
echo $to_print > $tablename.csv
cat $tablename | tail -$t1 >>$tablename.csv
# awk -v var1="$t1" -v var2="$total_list" -v lister="$to_print" ' BEGIN{FS=" "; print lister }
#  NR==var1,NR==var2 { print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10 }' $tablename > $tablename.csv
xdg-open $tablename.csv
;;

5) break ;;
esac

done

else
  use_database
fi


} # end of select_record function

display_table(){
clear
if [[ $dbtouse ]] 
  then

table_list
read -p "Enter Table Name To Select Show It's Schema : " tablename

while true 
do

total_list=`cat $tablename.conf | wc -l`
t=$((total_list-1))
t2=$((t-4))
clear

echo "*********************************************************"
echo "              Table Name : $tablename                    "
echo "              -----------------------                    "

 # echo "Column: "`cat $tablename.conf | head -$t | tail -$t2 | cut -d: -f1`
 # echo "Datatype: "`cat $tablename.conf | head -$t | tail -$t2 | cut -d: -f2`
 # echo "PrimaryKey: "`cat $tablename.conf | head -$t | tail -$t2 | cut -d: -f3`
 # echo "Null Constrain: "`cat $tablename.conf | head -$t | tail -$t2 | cut -d: -f4`
echo "Column : Datatype : PrimaryKey : Null Constrain "
echo ""
cat $tablename.conf | head -$t | tail -$t2
echo ""
echo "*********************************************************"
echo ""
read -p "Choose 1 To Back To Manager: " dis_table_opt

case $dis_table_opt in 
	1) break ;;
esac
done
else
	use_database
fi

} # end of display_table function

while true
do
clear
if [[ $flagchange -eq 1 ]]
	then
echo "NOTE: You Are Using [$dbtouse] Database"

else 
	echo "Warrning You Must Select Database First"
fi
echo " "
echo "Welcome To DataBase Manager
1-  Use DB
2-  Create New DataBase
3-  Create Table
4-  Alter Table
5-  Add Record
6-  Edit Record
7-  Delete Record 
8-  Select Record
9-  Display Table
10-  Sort Table
11- Drop Table
12- Drop DB
13- Quit Manager
"
read -p "CHOOSE AN OPTION: " option
case $option in
1) use_database ;;
2) create_db ;;
3) create_table ;;
4) alter_table ;;
5) add_record ;;
6) edit_record ;;
7) delete_record ;;
8) select_record ;;
9) display_table ;;
10) sort_table ;;
11) drop_table ;;
12) drop_db ;;
13) exit ;;
esac
done