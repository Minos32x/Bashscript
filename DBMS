#! /bin/bash
flagchange=0
flagemptydb=0
flagusingdb=0
create_db() {
clear
if [[ flagchange -eq 1 ]]
	then
cd ..
flagchange=0	
fi

if [[ $flagemptydb -eq 1 ]]
  then
echo "You Must Create DataBase First To Use It"
fi

flagemptydb=0

read -p "Enter DataBase Name To Create: " dbname

if [ -d $dbname ]
then
echo "Couldn't Create
A DataBase With Same name already exist"
else
mkdir $dbname
echo "DataBase * $dbname * Created Successfully"
# flagemptydb=0
fi
} #end of create_db func

switch_to_db(){
if [ -d $1 ]
then
cd $1
else
echo "Error DataBase Doesn't Exists"
exit
fi
} #end of switch_db func

func_list(){
list=`ls -lh --ignore={".","..",".git","DBMS","README"} | grep '^d' | cut -d" " -f10`
if [[ $list == "" ]]
then
echo "Empty Folder"
flagemptydb=1
else
for f in $list
do
if [ -d $f ]
then
echo $f

#elif [ -f $f ]
#	then
#	echo "No Data Base To Be Showen"
#	break
fi
done
fi
} #end of listing func

table_list(){
	tablelist=`ls`
if [[ $tablelist == "" ]]
then
echo "No Tables To Show Database is Empty "
else
	echo $tablelist
fi
}


# add_filed function is still not efficiently working
add_filed(){
  echo "Availabe Tables"
  table_list
  read -p "choose table" tablename
  read -p "number of col:" colnumbers
  sed -i '/\<end_conf\>/d' $tablename 
  for ((i=1;i<=$colnumbers;i++ ))
  do 
  

  funccheck
  done
  echo "end_conf" >> $tablename


} # end of field func

delete_field()
{
  echo "Availabe Tables"
  table_list
  read -p "choose table" tablename
endnum=`grep -n "end_conf" $tablename | grep -Eo '^[^:]+'`
v=$(($endnum-1))
echo $v
t=$(($v-4))
  echo "available fields :"
  cat $tablename | head -$v | tail -$t | cut -d: -f1 
  echo ""
  read -p "choose field to delete" deleted_field
  sed -i "/^$deleted_field:/d" $tablename 

}

change_field_type(){
  clear
echo "Availabe Tables"
  table_list
  read -p "Select Table: " tablename
endnum=`grep -n "end_conf" $tablename | grep -Eo '^[^:]+'`
v=$(($endnum-1))
echo $v
t=$(($v-4))
  echo "available fields :"
  cat $tablename | head -$v | tail -$t | cut -d: -f1 
  echo ""
  read -p "choose field to Edit: " field_to_edit
clear
field_edit_dtype=`grep $field_to_edit $tablename | cut -d: -f2`
field_edit_null=`grep $field_to_edit $tablename | cut -d: -f4`
ff=`grep -n $field_to_edit $tablename | grep -Eo '^[^:]+'`


  echo "
1-edit datatype
2-edit null constrain"
read -p "SELECT AN OPTION: " edit_field_type
clear
case $edit_field_type in
1) echo "Current Data Type :" $field_edit_dtype
select colType in Ineteger String
              do
                case $colType in
                  "Ineteger")
                # sed -i -e '5s/String/Ineteger/' $tablename 
                awk -i inplace -v var2="$ff" 'NR==var2 {gsub("String","Ineteger")}{print }' $tablename
                    break ;
                    ;;
                  "String")
                awk -i inplace -v var2="$ff" 'NR==var2 {gsub("Ineteger","String")}{print }' $tablename 
                    break ;
                    ;;
                  *)
                echo "You Must Choose Column Data Type"
                esac
              done
              

;;
2) 
if [[ $field_edit_null ]]
  then
echo "Current Null Constrain :" $field_edit_null
select colType in NotNull AcceptNull
              do
                case $colType in
                  "NotNull")
                   awk -i inplace -v var2="$ff" 'NR==var2 {gsub("AcceptNull","NotNull")}{print }' $tablename

                    break ;
                    ;;
                  "AcceptNull")
                    awk -i inplace -v var2="$ff" 'NR==var2 {gsub("NotNull","AcceptNull")}{print }' $tablename

                    break ;
                    ;;
                  *)
                echo "You Must Choose Column Data Type"
                esac
              done
    else
      echo "This Field Is Primary Cant have null option"
    fi

;;

esac  
clear


}

funccheck(){
	read -p "Enter Column [$i] Name: " ColName 
	resultfield=`grep $ColName $tablename | wc -l`

	if [[ $resultfield -eq 0 ]]
		then
    colArr[$i]=$ColName
    echo -n $ColName >> $tablename
    PS3="Select Column [$ColName]  Data Type: ";
    flag=0

      				select colType in Ineteger String
      				do
      					case $colType in
      						"Ineteger")
								echo -n ":Ineteger" >> $tablename;
      							break ;
      							;;
      						"String")
								echo -n ":String" >> $tablename;
      							break ;
      							;;
      						*)
								echo "You Must Choose Column Data Type"
      					esac
      				done
      				
      				 result=`grep '\<Primary\>' $tablename | wc -l`

      				echo " "
      				echo "Select Primary Key"
      				echo " "
      				if [[ $result -eq 0 ]]
      					then
      				select colType in Primary NotPrimary
      				do
      					case $colType in
      						"Primary")
                flag=1
								echo -e ":Primary" >> $tablename;
								 
      							break ;
      							;;
      						"NotPrimary")
								echo -n ":NotPrimary" >> $tablename;
      							break ;
      							;;
      						*)
								echo "You Must Choose The Primary Key"
      					esac
      				done
      			else
      				echo -n ":NotPrimary" >> $tablename;
      			    fi # end of primary selection
                    
                      
                     if [[ flag -eq 0 ]]
                     	then
                     	flag=1
      			    # select null constrains
      				echo " "
      				echo "Select Null OR Not Null Constrain for $ColName Field"
      				echo " "
      				select colType in NotNull AcceptNull
      				do
      					case $colType in
      						"NotNull")
								echo -n ":NotNull" >> $tablename;
								read -p "Enter Default Value: " defvalue

                                 echo -e "*$defvalue*" >> $tablename  

      							break ;
      							;;
      						"AcceptNull")
								echo -e ":AcceptNull" >> $tablename;
      							break ;
      							;;
      						*)
								echo "You Must Choose Column Constrain"
      					esac
      				done #end of null constrain
      			fi
    else
    	echo "Field Already Exist"
    	funccheck
    	
    fi
}

create_table(){
clear
if [[ $dbtouse ]]
	then
# echo "Current Databases: "
# func_list
# read -p "Choose DataBase: " dbtouse
# switch_to_db $dbtouse
clear
echo "Current Tables: "
table_list
read -p "Create Table: " tablename

if [ -f $tablename ]
then
echo "Table Already Exists"
exit

else
	
	clear
touch $tablename
if [ $? == 0 ]
	then
	echo "*****************************************" >> $tablename
	echo "Table *"$tablename"* Schema" >> $tablename
	read -p "Enter Columns Number: " colnumbers
	echo "Columns Numbers = " $colnumbers >> $tablename         
	echo "*****************************************" >> $tablename
	for ((i=1;i<=$colnumbers;i++ ))
	do 
	echo "*****************************************"

	funccheck
	done
	echo "end_conf" >> $tablename
  echo " "
  echo "start_table" >> $tablename
  echo " "




clear
echo "Creating Table Please Wait"
sleep 1
clear
echo "Table : $tablename  Created Successfully in * $dbtouse * DataBase"

fi
sleep 1
fi
else
	
	use_database
fi
} #end of table creation function

drop_db(){
	echo "Current Databases"
	func_list
  if [[ $flagusingdb -eq 1 ]]
then
echo "You Cant' Drop Database While Using It"
else
  read -p "Choose DataBase To Drop: " dbtodrop
  rm -r $dbtodrop
fi
		
	
	

}

drop_table(){
	if [[ $dbtouse ]]
		then
#func_list
#read -p "Choose DataBase: " dbtouse
#switch_to_db $dbtouse
table_list

read -p "Enter Table Name To Drop: " tabledropname
if [ -f $tabledropname ]
then
rm $tabledropname
cd ..
else
echo "Table Doesn't Exist"
cd ..
fi
else
	
	use_database
fi
} #end of dropping table func

change_table_name(){
	echo "Availabe Tables"
    table_list

	read -p "Enter Old File Name" oldname
	read -p "Enter New File Name" newname
    mv $oldname $newname


}

alter_table(){
if [[ $dbtouse ]] 
	then
	clear
	#         echo " You Are on [ $dbtouse ] Database"
while true
  do
    echo " You Are on [ $dbtouse ] Database"
    echo ""
echo "
1- Change table name
2- Add field
3- Delete field
4- Change field datatype
5- Back To Manager
"

read -p "CHOOSE AN OPTION: " alteroption

case $alteroption in
	1) change_table_name ;;
  2) add_filed;;
	3) delete_field;;
	4) change_field_type;;
    5) break;;
esac

  done
else
	use_database
fi


}

use_database(){
clear
echo "You Must Select Database First"
echo "Current Databases:"
func_list

if [[ $flagemptydb -eq 1 ]]
  then
    create_db
else

read -p "Select DataBase: " dbtouse
switch_to_db $dbtouse
flagusingdb=1
fi

flagchange=1

echo "You Are Using [$dbtouse] Database"
} # end of use_database function


sort_table(){

if [[ $dbtouse ]] 
  then
while true
do 

echo "
1-Start Sorting 
2-Back To Manager"
read -p "Select Option : " sort_func_opt


case $sort_func_opt in 
  1)
clear 
echo "Availabe Tables: "
echo ""
table_list
echo ""
read -p "Enter Table Name To Sort It: " tablename

startnum=`grep -n "start_table" $tablename | grep -Eo '^[^:]+'`

total_list=`cat $tablename | wc -l`
t1=$((total_list-startnum))  
clear
echo "Availabe Rows :"
cat $tablename | tail -$t1

endnum=`grep -n "end_conf" $tablename | grep -Eo '^[^:]+'`
v=$(($endnum-1))
t=$(($v-4))
echo "Availabe Fields To Sort With :"
to_count=`cat $tablename | head -$v | tail -$t | cut -d: -f1 | wc -l` 
to_print=`cat $tablename | head -$v | tail -$t | cut -d: -f1` 

for((i=1;i<=$to_count;i++))
do
  field_name=`echo $to_print | cut -d" " -f"$i"`
  echo $i")" $field_name
done
read -p "Select Field To Sort With[Select No Of The Field] : " field_sort
echo " 
Choose preference to sort with 
1- Ascending
2- Descending
"

ch_field=$((field_sort+4))
field_sort_type_check=`cat $tablename | head -$ch_field | tail -1 | cut -d: -f2`

read -p "" sort_opt
clear
echo "*********************************************************" 
echo "Current Columns"
echo $to_print 
case $sort_opt in
  1)
if [[ $field_sort_type_check == "Ineteger" ]]
then
cat $tablename | tail -$t1 | sort -t" " -k$field_sort -g  
elif [[ $field_sort_type_check == "String" ]]
  then
cat $tablename | tail -$t1 | sort -t" " -k$field_sort  
fi
    ;;
  2)
if [[ $field_sort_type_check == "Ineteger" ]] 
  then
cat $tablename | tail -$t1 | sort -r -t" " -k$field_sort -g
elif [[ $field_sort_type_check == "String" ]]
  then
cat $tablename | tail -$t1 | sort -r -t" " -k$field_sort
fi
  ;; 
esac
echo "*********************************************************" 

;;
2) break;;
esac
done

else
use_database

  fi

} # end of function sort 


select_record(){
  clear

if [[ $dbtouse ]] 
  then
  echo "Availabe Tables: "
table_list
read -p "Enter Table Name To Select From It : " tablename
  while true
  do
echo "
Select Options :
1- Select All
2- Select According to Certain Field 
3- Show All File in HTML From
4- Show All File in CSV FORM
5- Back To Manager
"

read -p "Choose an option: " select_opt

case $select_opt in
1)

echo "*********************************************************" 
startnum=`grep -n "start_table" $tablename | grep -Eo '^[^:]+'`
total_list=`cat $tablename | wc -l`
t1=$((total_list-startnum))  
echo "Availabe Rows :"
cat $tablename | tail -$t1 
echo "*********************************************************"
sleep 5
;;

2) ;;


3)
startnum=`grep -n "start_table" $tablename | grep -Eo '^[^:]+'`
total_list=`cat $tablename | wc -l`
t1=$((startnum+1))
echo $t1
echo $total_list  
echo "Availabe Rows :"
# cat $tablename | tail -$t1 >> table-$tablename.html
endnum=`grep -n "end_conf" $tablename | grep -Eo '^[^:]+'`
v=$(($endnum-1))
t=$(($v-4))
echo "Availabe Fields To Sort With :"
to_count=`cat $tablename | head -$v | tail -$t | cut -d: -f1 | wc -l` 
to_print=`cat $tablename | head -$v | tail -$t | cut -d: -f1` 

for((i=1;i<=$to_count;i++))
do
  field_name=`echo $to_print | cut -d" " -f"$i"`
  echo $i")" $field_name
done

echo "*********************************************************" 
awk -v var1="$t1" -v var2="$total_list" -v lister="$to_print" ' BEGIN{FS=" "; print "<div style=background:blue>" "<strong>"lister"</strong>" "</div>"  "<br/>" }
 NR==var1,NR==var2 { print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10 "<br/>" }' $tablename > $tablename.html
echo "*********************************************************" 
;;

4)
startnum=`grep -n "start_table" $tablename | grep -Eo '^[^:]+'`
total_list=`cat $tablename | wc -l`
t1=$((total_list-startnum))  
echo "Availabe Rows :"
# cat $tablename | tail -$t1 >>table-$tablename.csv
awk -v var1="$t1" -v var2="$total_list" -v lister="$to_print" ' BEGIN{FS=" "; print "<strong>"lister"</strong>" "<br/>" }
 NR==var1,NR==var2 { print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10 "<br/>" }' $tablename > $tablename.csv
;;
5) break ;;
esac

done

else
  use_database
fi


}


while true
do
clear
if [[ $flagchange -eq 1 ]]
	then
echo "NOTE: You Are Using [$dbtouse] Database"

else 
	echo "Warrning You Must Select Database First"
fi
echo " "
echo "Welcome To DataBase Manager
1-  Use DB
2-  Create New DataBase
3-  Create Table
4-  Alter Table
5-  Add Record
6-  Edit Record
7-  Select Record
8-  Display Table
9-  Sort Table
10- Drop Table
11- Drop DB
12- Quit Manager
"

read -p "CHOOSE AN OPTION: " option
case $option in
1) use_database ;;
2) create_db ;;
3) create_table ;;
4) alter_table ;;
5) add_filed ;;
6) edit_record ;;
7) select_record ;;
8) display_table ;;
9) sort_table ;;
10) drop_table ;;
11) drop_db ;;
12) exit ;;

esac

done


